import '../factorization/factorizer.grm' as factorization;
import '../../byte.grm' as bytelib;

del_mas      = ("__MAS":"");
del_fem      = ("__FEM":"");


ins_space    = ("" :  " "       );
ins_ve       = ("" :  "ו"       );
ins_elef     = ("[E3]" :  "אלף"     );
ins_million  = ("[E3]" :  "מיליון"  );
ins_milliard = ("[E3]" :  "מיליארד" );
ins_trillion = ("[E3]" :  "טריליון" );


#gender  : male 
#numbers : 0-9

m_0_9 = ("0"         :  "אפס"  )
|("1"         :  "אחד"        )
|("2"         :  "שניים"      )
|("3"         :  "שלושה"      )
|("4"         :  "ארבעה"       )
|("5"         :  "חמישה"     )
|("6"         :  "שישה"       )
|("7"         :  "שבעה"        )
|("8"         :  "שמנה"      )
|("9"         :  "תשעה"        )
;

#gender  : female
#numbers : 1-10

f_0_9 = ("0"          :  "אפס" )
|("1"         :  "אחת"        )
|("2"         :  "שתיים"      )
|("3"         :  "שלוש"      )
|("4"         :  "ארבע"        )
|("5"         :  "חמש"      )
|("6"         :  "שש"        )
|("7"         :  "שבע"        )
|("8"         :  "שמונה"      )
|("9"         :  "תשע"      )
;


#gender  : male 
#numbers : 10-19

m_10_19 = ("1[E1]" : "עשרה"  )
|("1[E1]1"    :  "אחד עשרה"   
<-1.0> )
|("1[E1]2"    :  "שנים עשרה"  
<-1.0> )
|("1[E1]3"    :  "שלושה עשר" 
<-1.0> )
|("1[E1]4"    :  "ארבעה עשר"   
<-1.0> )
|("1[E1]5"    :  "חמישה עשר"
<-1.0> )
|("1[E1]6"    :  "שישה עשר"  
<-1.0> )
|("1[E1]7"    :  "שבעה עשר"   
<-1.0> )
|("1[E1]8"    :  "שמונה עשר"  
<-1.0> )
|("1[E1]9"    :  "תשעה עשר"   
<-1.0>)
;


#gender  : female. 
#numbers : 10-19.

f_10_19 = ("1[E1]" : "עשר"    )
|("1[E1]1"    :  "אחת עשרה"   
<-1.0> )     
|("1[E1]2"    :  "שתים עשרה"  
<-1.0> )
|("1[E1]3"    :  "שלוש עשרה" 
<-1.0>)
|("1[E1]4"    :  "ארבע עשרה"    
<-1.0> )
|("1[E1]5"    :  "חמש עשרה" 
<-1.0> )
|("1[E1]6"    :  "שש עשרה"   
<-1.0> )
|("1[E1]7"    :  "שבע עשרה"   
<-1.0>)
|("1[E1]8"    :  "שמונה עשרה"  
<-1.0>)
|("1[E1]9"    :  "תשע עשרה"   
<-1.0>)
;


#gender: male and female
#number: 20-90

mf_20_90= ("2[E1]" : "עשרים"      )
|("3[E1]"    :  "שלושים"       )
|("4[E1]"    :  "ארבעים"         )
|("5[E1]"    :  "חמישים"       )
|("6[E1]"    :  "שישים"        )
|("7[E1]"    :  "שבעים"         )
|("8[E1]"    :  "שמונים"        )
|("9[E1]"    :  "תשעים"         )
;

#gender: male and female
#number: 100-900

mf_100_900= ("1[E2]"    :  "מאה"            )
|("2[E2]"    :  "מאתים"        )
|("3[E2]"    :  "שלוש מאות"    )
|("4[E2]"    :  "ארבע מאות"      )
|("5[E2]"    :  "חמש מאות"   )
|("6[E2]"    :  "שש מאות"     )
|("7[E2]"    :  "שבע מאות"      )
|("8[E2]"    :  "שמונה מאות"    )
|("9[E2]"    :  "תשע מאות"      )
;

#gender: male and female
#number: 1000-9000

mf_1000_9000= ("1[E3]"    :  "אלף" )
|("2[E3]"    :  "אלפים"             )
|("3[E3]"    :  "שלושת אלפים"     )
|("4[E3]"    :  "ארבעת אלפים"      )
|("5[E3]"    :  "חמשת אלפים"    )
|("6[E3]"    :  "ששת אלפים"     )
|("7[E3]"    :  "שבעת אלפים"      )
|("8[E3]"    :  "שמונת אלפים"     )
|("9[E3]"    :  "תשעת אלפים"      )
;

mf_rest= ("1[E1]1[E3]"    :  "עשרת אלפים"  );

#------------------------ Female ------------------------------------

f_numbers_20_to_99   = mf_20_90 | mf_20_90 ins_space ins_ve f_0_9 ; 
f_numbers_to_99      = Optimize[ f_0_9 | f_10_19 | f_numbers_20_to_99] ;
f_numbers_100_to_999 = 
Optimize[
  mf_100_900 |
  mf_100_900 ins_space ins_ve f_0_9   |
  mf_100_900 ins_space ins_ve f_10_19 |
  mf_100_900 ins_space f_numbers_20_to_99]
;

f_numbers_to_999    = Optimize[f_numbers_to_99 | f_numbers_100_to_999];

f_numbers_1000_to_9999 = 
Optimize[
  mf_1000_9000|
  (mf_1000_9000 ins_space ins_ve f_0_9  <-1.0>) |
  mf_1000_9000 ins_space f_numbers_to_999];

f_numbers_to_9999 = Optimize[f_numbers_to_999 | f_numbers_1000_to_9999];

f_numbers = Optimize[
        f_numbers_to_999 ins_space ins_trillion ins_space f_numbers_to_999 ins_space ins_milliard ins_space f_numbers_to_999 ins_space ins_million ins_space f_numbers_to_999 ins_space ins_elef ins_space f_numbers_to_999 	
|        f_numbers_to_999 ins_space ins_milliard ins_space f_numbers_to_999 ins_space ins_million f_numbers_to_999 ins_space ins_elef ins_space f_numbers_to_999 
|	f_numbers_to_999 ins_space ins_million ins_space f_numbers_to_999 ins_space ins_elef ins_space f_numbers_to_999 
|        f_numbers_to_999 ins_space ins_elef ins_space f_numbers_to_999 
|       (f_numbers_to_9999 <-1.0>) 
|       (mf_rest <-2.0>)] ;


#------------------------------ End female ------------------------------


#------------------------ Male ------------------------------------

m_numbers_20_to_99   = mf_20_90 | mf_20_90 ins_space ins_ve m_0_9 ; 
m_numbers_to_99      = Optimize[ m_0_9 | m_10_19 | m_numbers_20_to_99] ;
m_numbers_100_to_999 = 
Optimize[
  mf_100_900 |
  mf_100_900 ins_space ins_ve m_0_9   |
  mf_100_900 ins_space m_10_19 |
  mf_100_900 ins_space m_numbers_20_to_99]
;

m_numbers_to_999    = Optimize[m_numbers_to_99 | m_numbers_100_to_999];

m_numbers_1000_to_9999 = 
Optimize[
  mf_1000_9000|
 (mf_1000_9000 ins_space ins_ve m_0_9  <-1.0>) |
  mf_1000_9000 ins_space m_numbers_to_999];

m_numbers_to_9999 = Optimize[m_numbers_to_999 | m_numbers_1000_to_9999];

m_numbers = Optimize[
        m_numbers_to_999 ins_space ins_trillion ins_space m_numbers_to_999 ins_space ins_milliard ins_space m_numbers_to_999 ins_space ins_million ins_space m_numbers_to_999 ins_space ins_elef ins_space m_numbers_to_999 	
|        m_numbers_to_999 ins_space ins_milliard ins_space m_numbers_to_999 ins_space ins_million m_numbers_to_999 ins_space ins_elef ins_space m_numbers_to_999 
|	m_numbers_to_999 ins_space ins_million ins_space m_numbers_to_999 ins_space ins_elef ins_space m_numbers_to_999 
|        m_numbers_to_999 ins_space ins_elef ins_space m_numbers_to_999 
|       (m_numbers_to_9999 <-1.0>) 
|       (mf_rest <-2.0>)] ;



#------------------------------ End male ------------------------------

#first handle the gender. By default the input is 
num    = bytelib.kDigit+;

mas  = num del_mas;
fem  = num del_fem;


export HEB_NUMBERS = mas @ factorization.WESTERN_FACTORIZATION @ m_numbers |
                     fem @ factorization.WESTERN_FACTORIZATION @ f_numbers |
                    (num @ factorization.WESTERN_FACTORIZATION @ m_numbers <1.0>);


