# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright 2005-2011 Google, Inc.
# Author: rws@google.com (Richard Sproat)

import 'byte.grm' as bytelib;
import 'times.grm' as times;


# Simple example of a mapping between strings: this transducer does nothing
# except insert a space:

insspace = "" : " ";

# Use the transducer defined by kSpace in byte.grm to map a sequence of one or
# more spaces to exactly one space:

reduce_spaces = bytelib.kSpace+ : " ";

# This deletes a sequence of zero or more spaces:

delspace = bytelib.kSpace* : ""; 

sigma_star = bytelib.kBytes*;

# This rule illustrates the difference operator. One can specify the difference
# between any pair of regular expressions that specify *acceptors*. In this case
# we specify any punctuation symbol that is not a period:

punct_not_period = bytelib.kPunct - "." - "'" - "-" - "_";

# In the first rule below the change is to insert a space, the left context
# anything at all (hence null) and the right context the acceptor specified
# above as punct_not_period:

separate_punct1 = CDRewrite["" : "\[##\]",bytelib.kAlnum, punct_not_period, sigma_star];

# Similar to the above, except that we insert a space after the punctuation
# symbol:

separate_punct2 = CDRewrite["" : "\[##\]", punct_not_period,bytelib.kAlnum, sigma_star];

# The following illustrates composition: we construct the rule separate_punct by
# composing separate_punct1 with separate_punct2:

separate_punct = separate_punct1 @ separate_punct2;

# This rule illustrates the use of the string delimiter tag "[EOS]". Assuming
# that any sentence internal period marks something like an abbreviation or
# maybe a decimal number, we only want to split off final periods. These may be
# followed by spaces or other puncutation symbols. So the following rule states
# that we insert a space when followed by a period that is itself followed by an
# optional string of spaces or punctuation symbols, followed by the end of the
# string. For the left context, one may specify the beginning of the string as
# "[BOS]".

separate_final_period = CDRewrite["" : "\[##\]", 
                                  bytelib.kAlnum,
                                  "."
                                  (bytelib.kPunct | bytelib.kSpace)* "[EOS]",
                                  sigma_star]
;

# The following rule composes two transducers, and optimizes the
# result. Optimize performs various optimizations on the transducer: removing
# epsilon arcs, summing arc weights, determinizing and minimizing. The resulting
# transducers is in general more compact and efficient. Especially in large
# grammars, it is a good idea to optimize at least some of the intermediate
# transducers. This can significantly speed up compilation.

second_phase = Optimize[separate_punct @ separate_final_period];

anyword = bytelib.kNotSpace+;
time = times.TIMES;

word = (anyword <1.0>) | time;

# A sentence consists of a sequence of words interspersed with spaces. Initial
# and final spaces get deleted, and interword spaces get reduced to exactly one
# space:

first_phase = delspace 
               word
               (reduce_spaces word)*
	       delspace
;

# Some sequences involving apostrophes are overzealously tokenized. These rules
# fix that and produces more reasonable tokenizations. Note that the grouping
# parentheses are required when one is construction a disjunction of
# transductions:

regroupings = ("n ' t" : "n't") | (" ' s" : "'s") ;

final_phase = CDRewrite[regroupings, "", (bytelib.kSpace | "[EOS]"),
                        sigma_star];

# The whole tokenizer is the composition of the three phases. We export this
# rule since we want it available in the final FST archive:

export TOKENIZER = Optimize[first_phase @ second_phase @ final_phase];
